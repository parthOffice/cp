1. euclid algo ( gcd calculation ) - gcd (a, b) = gcd(a- b, b) = gcd (b, a%b) --> a > b 

int gcd(int a,int b)
{
  if(b == 0)return a; 
  else return gcd(b, a%b);
}

int lcm(int a,int b)
{
    return (a*b)/gcd(a,b);
}

2. primality - prime ( no factors other than 1 and the number self )

// using primality test
bool isPrime(int x)
{
    for(int i=0;i*i<=x;i++)
    {
        if(x%i == 0)
            return false;
    }
    return true;
}

sieve of eratosthenes - finding all the prime numbers in range tc ( o(nlog(logn)) )

void SieveOfEratosthenes(int n)
{
   vector<bool> p(n + 1, true);

   for (int i = 2; i * i <= n; i++) {
        if (p[i] == true) {
            for (int j = i * i; j <= n; j += i)
                prime[j] = false;
        }
    }

    // Print all prime numbers
    for (int p = 2; p <= n; p++)
        if (prime[p])
            cout << p << " ";
}

3. fast exponentiation - binary exponentiation

ll binpow(ll a, ll b, ll m) {
    a %= m;
    ll res = 1;
    while (b > 0) {
        if (b & 1)
            res = res * a % m;
        a = a * a % m;
        b >>= 1;
    }
    return res;
}




