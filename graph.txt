1. djikstra ( shortest path from a source, for weighted graphs )

const int INF = 1000000000;
vector<vector<pair<int, int>>> adj;

/*
s = source
d = distance ( distance from the source )
p = prev ( to store the prev nodes ) 
u = visited array 
*/

// array based implementation
void dijkstra(int s, vector<int> & dist, vector<int> & prev) {
    int n = adj.size();
    dist.assign(n, INF);
    prev.assign(n, -1);
    vector<bool> vis(n, false);

    dist[s] = 0;
    for (int i = 0; i < n; i++) {
        int v = -1;
        for (int j = 0; j < n; j++) {
            if (!vis[j] && (v == -1 || dist[j] < dist[v]))
                v = j;
        }

        if (dist[v] == INF)
            break;

        vis[v] = true;
        for (auto edge : adj[v]) {
            int to = edge.first;
            int len = edge.second;

            if (dist[v] + len < d[to]) {
                dist[to] = dist[v] + len;
                prev[to] = v;
            }
        }
    }
}
