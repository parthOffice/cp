1. djikstra ( shortest path from a source, for weighted graphs )

const int INF = 1000000000;
vector<vector<pair<int, int>>> adj;

/*
s = source
d = distance ( distance from the source )
p = prev ( to store the prev nodes ) 
u = visited array 
*/

// array based implementation o(v2)
void dijkstra(int s, vector<int> & dist, vector<int> & prev) {
    int n = adj.size();
    dist.assign(n, INF);
    prev.assign(n, -1);
    vector<bool> vis(n, false);

    dist[s] = 0;
    for (int i = 0; i < n; i++) {
        int v = -1;
        for (int j = 0; j < n; j++) {
            if (!vis[j] && (v == -1 || dist[j] < dist[v]))
                v = j;
        }

        if (dist[v] == INF)
            break;

        vis[v] = true;
        for (auto edge : adj[v]) {
            int to = edge.first;
            int len = edge.second;

            if (dist[v] + len < d[to]) {
                dist[to] = dist[v] + len;
                prev[to] = v;
            }
        }
    }
}

// heap based implementation (sssp) ( tc - o(log(v)(v+e)) ) 
void dijkstra(int s, std::vector<std::vector<std::pair<int, int>>> &adj, std::vector<int> &dist, std::vector<int> &prev) {
    int n = dist.size();
    std::vector<bool> vis(n, false);
    dist.assign(n, INF);
    prev.assign(n, -1);
    dist[s] = 0;
    std::priority_queue<std::pair<int, int>, std::vector<std::pair<int, int>>, std::greater<>> pq;
    pq.push({0, s});

    while (!pq.empty()) {
        int v = pq.top().second;
        pq.pop();

        if (vis[v]) continue;
        vis[v] = true;

        for (auto edge : adj[v]) {
            int u = edge.first;
            int weight = edge.second;
            if (dist[v] + weight < dist[u]) {
                dist[u] = dist[v] + weight;
                prev[u] = v;
                pq.push({dist[u], u});
            }
        }
    }
}


// bellman ford ( sssp ) - shortes path algo for negative edges
vector<int> bellmanFord(int V, vector<vector<int>>& edges, int src) {
   vector<int> dist(V, 1e8);
    dist[src] = 0;
   
    for (int i = 0; i < V; i++) {
        for (vector<int> edge : edges) {
            int u = edge[0];
            int v = edge[1];
            int wt = edge[2];
            if (dist[u] != 1e8 && dist[u] + wt < dist[v]) {
                
              
                if(i == V - 1)
                    return {-1};
                dist[v] = dist[u] + wt;
            }
        }
    }
    return dist;
}

// floyd warshall - ( pair wise shortest distance )
void floydWarshall(vector<vector<int>> &graph) {
    int V = graph.size();
    for (int k = 0; k < V; k++) {
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {

                if ((graph[i][j] == -1 || 
                    graph[i][j] > (graph[i][k] + graph[k][j]))
                    && (graph[k][j] != -1 && graph[i][k] != -1))
                    graph[i][j] = graph[i][k] + graph[k][j];
            }
        }
    }
}

